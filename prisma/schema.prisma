// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Fabricante {
  id          Int          @id @default(autoincrement())
  nome        String       @db.VarChar(30)
  ferramentas Ferramenta[]

  @@map("fabricantes")
}

model Ferramenta {
  id                  Int             @id @default(autoincrement())
  modelo              String          @db.VarChar(60)
  ano                 Int             @db.SmallInt
  preco               Decimal         @db.Decimal(10, 2)
  quantidadeEmEstoque Int             @db.MediumInt
  destaque            Boolean         @default(true)
  foto                String
  acessorios          String? // Pode ser uma string com uma descrição dos acessórios disponíveis
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  tipo                StatusOrdem     @default(PENDENTE)
  fabricante          Fabricante      @relation(fields: [fabricanteId], references: [id])
  fabricanteId        Int
  fotos               Foto[]
  // ordens              OrdemDeCompra[]
  Avaliacao           Avaliacao[]
  Favorito            Favorito[]
  OrdemDeCompra       OrdemDeCompra[]
  Admin               Admin[]

  @@map("ferramentas")
}

model Avaliacao {
  id             Int        @id @default(autoincrement())
  totalAvaliacao Int
  estrelas       Int        @default(0)
  comentario     String?    @db.VarChar(255)
  ferramenta     Ferramenta @relation(fields: [ferramentaId], references: [id])
  ferramentaId   Int
  cliente        Cliente    @relation(fields: [clienteId], references: [id])
  clienteId      String     @db.VarChar(36)
}

model Favorito {
  id           Int        @id @default(autoincrement())
  cliente      Cliente    @relation(fields: [clienteId], references: [id])
  clienteId    String     @db.VarChar(36)
  ferramenta   Ferramenta @relation(fields: [ferramentaId], references: [id])
  ferramentaId Int

  @@map("favoritos")
}

model Foto {
  id           Int        @id @default(autoincrement())
  descricao    String     @db.VarChar(30)
  codigoFoto   String     @db.LongText
  ferramenta   Ferramenta @relation(fields: [ferramentaId], references: [id])
  ferramentaId Int

  @@map("fotos")
}

model Cliente {
  id        String   @id @default(uuid()) @db.VarChar(36)
  nome      String   @db.VarChar(60)
  email     String   @unique @db.VarChar(60)
  senha     String   @db.VarChar(60)
  novaSenha String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Avaliacao     Avaliacao[]
  Favorito      Favorito[]
  OrdemDeCompra OrdemDeCompra[]

  @@map("clientes")
}

model OrdemDeCompra {
  id           Int         @id @default(autoincrement())
  cliente      Cliente     @relation(fields: [clienteId], references: [id])
  clienteId    String      @db.VarChar(36)
  ferramenta   Ferramenta  @relation(fields: [ferramentaId], references: [id])
  ferramentaId Int
  descricao    String      @db.VarChar(255)
  resposta     String?     @db.VarChar(255)
  status       StatusOrdem @default(PENDENTE)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@map("ordens")
}

model Admin {
  id           Int        @id @default(autoincrement())
  nome         String     @db.VarChar(60)
  email        String     @unique @db.VarChar(60)
  senha        String     @db.VarChar(60)
  createAt     DateTime   @default(now())
  updateAt     DateTime   @updatedAt
  ferramenta   Ferramenta @relation(fields: [ferramentaId], references: [id])
  ferramentaId Int
  @@map("admins")
}

enum StatusOrdem {
  PENDENTE
  CONCLUIDA
  CANCELADA
}

